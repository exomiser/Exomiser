syntax = "proto3";

//import "org/monarchinitiative/exomiser/core/schema/model.proto";

option java_package = "org.monarchinitiative.exomiser.core.proto";
option java_outer_classname = "AlleleProto";

message AlleleKey {
    int32 chr = 1;
    int32 position = 2;
    string ref = 3;
    string alt = 4;
}

message AlleleProperties {
    string rs_id = 1;
    map<string, float> properties = 2 [deprecated = true];
    ClinVar clinVar = 3;
    repeated Frequency frequencies = 4;
    repeated PathogenicityScore pathogenicityScores = 5;
}

message Frequency {
    FrequencySource frequencySource = 1; // 1 byte (Varint)
//    Population population = 2; // 1 byte (Varint)
    // AF doesn't need storing as it is calculated as AC/AN
    int32 ac = 3; // 1 byte (Varint)
    int32 an = 4; // 1-3 bytes (Varint - 2^24 = 16777216 max)
    int32 hom = 5; // 1 byte
//    float frequency = 6; // 4 bytes
//    string dataSource = 7; // ? bytes
}
    // "GNOMAD_G_EAS" = 12 bytes + float = 4 bytes = 16 bytes
    //
// "Strings: A wire type of 2 (length-delimited) means that the value is a varint encoded length followed by the specified
// number of bytes of data."
//  1 byte wire type + field number, 1-3 bytes length of field (varint), 1 byte / character (UTF-8)

// "embedded messages are treated in exactly the same way as strings (wire type = 2)."
//
// "repeated messages: Otherwise, all of the elements of the field are packed into a single key-value pair with wire type 2 (length-delimited).
//   Each element is encoded the same way it would be normally, except without a key preceding it."
// repeated field = 1 byte,
// no. repeated elements = 1 byte
//

// !!CAUTION - CHANGING THE INTEGER VALUES OF THE ENUM WILL RESULT IN INCORRECT DATA BEING RETURNED!! ONLY ADD NEW VALUES!!
// IF REMOVING A VALUE, COMMENT IT OUT AS A VISUAL REMINDER AND ADD THE VALUE TO RESERVED e.g.
//   message Foo {
//    reserved 2, 15, 9 to 11;
//    reserved "foo", "bar";
//   }



enum FrequencySource {
    UNSPECIFIED_FREQUENCY_SOURCE = 0;
    KG = 1;
    TOPMED = 2;
    UK10K = 3;

    ESP_EA = 4;
    ESP_AA = 5;
    ESP_ALL = 6;

    EXAC_AFR = 7;
    EXAC_AMR = 8;
    EXAC_EAS = 9;
    EXAC_FIN = 10;
    EXAC_NFE = 11;
    EXAC_OTH = 12;
    EXAC_SAS = 13;

    GNOMAD_E_AFR = 14;
    GNOMAD_E_AMR = 15;
    GNOMAD_E_ASJ = 16;
    GNOMAD_E_EAS = 17;
    GNOMAD_E_FIN = 18;
    GNOMAD_E_NFE = 19;
    GNOMAD_E_OTH = 20;
    GNOMAD_E_SAS = 21;

    GNOMAD_G_AFR = 22;
    GNOMAD_G_AMR = 23;
    GNOMAD_G_ASJ = 24;
    GNOMAD_G_EAS = 25;
    GNOMAD_G_FIN = 26;
    GNOMAD_G_NFE = 27;
    GNOMAD_G_OTH = 28;
}

enum Population {
    ALL = 0;
    AFR = 1;
    AMI = 2;
    AMR = 3;
    ASJ = 4;
    EAS = 5;
    FIN = 6;
    NFE = 7;
    MID = 8;
    SAS = 9;
    OTH = 10;
    // Extra ALFA populations
    EUR = 11;
}

message PathogenicityScore {
    PathogenicitySource pathogenicitySource = 1;
    float score = 2;
}

enum PathogenicitySource {
    UNKNOWN_PATH_SOURCE = 0;
    VARIANT_EFFECT = 1;
    POLYPHEN = 2;
    MUTATION_TASTER = 3;
    SIFT = 4;
    CADD = 5;
    REMM = 6;
    REVEL = 7;
    M_CAP = 8;
    MPC = 9;
    MVP = 10;
    PRIMATE_AI = 11;
    SPLICE_AI = 12;
    // An unspecified source for use in testing new pathogenicity scores
    TEST = 13;

    // SV data sources
    DBVAR = 14;
    CLINVAR = 15;
}

message ClinVar {
    enum ClinSig {
        //default
        NOT_PROVIDED = 0;
        // ACMG/AMP-based
        BENIGN = 1;
        BENIGN_OR_LIKELY_BENIGN = 2;
        LIKELY_BENIGN = 3;
        UNCERTAIN_SIGNIFICANCE = 4;
        LIKELY_PATHOGENIC = 5;
        PATHOGENIC_OR_LIKELY_PATHOGENIC = 6;
        PATHOGENIC = 7;
        CONFLICTING_PATHOGENICITY_INTERPRETATIONS = 8;
        //Non-ACMG-based
        AFFECTS = 9;
        ASSOCIATION = 10;
        DRUG_RESPONSE = 11;
        OTHER = 12;
        PROTECTIVE = 13;
        RISK_FACTOR = 14;
    }

    string alleleId = 1;
    ClinSig primaryInterpretation = 2;
    repeated ClinSig secondaryInterpretations = 3;
    string reviewStatus = 4;
    map<string, ClinSig> includedAlleles = 5;
}