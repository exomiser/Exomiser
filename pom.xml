<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ The Exomiser - A tool to annotate and prioritize genomic variants
  ~
  ~ Copyright (c) 2016-2022 Queen Mary University of London.
  ~ Copyright (c) 2012-2016 Charité Universitätsmedizin Berlin and Genome Research Ltd.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.monarchinitiative.exomiser</groupId>
    <artifactId>exomiser</artifactId>
    <version>13.2.0</version>
    <packaging>pom</packaging>

    <name>exomiser</name>
    <description>A toolkit for filtering variants and prioritising genes by phenotype from whole genome or whole exome VCF files.</description>
    <url>https://github.com/exomiser/Exomiser</url>
    <inceptionYear>2012</inceptionYear>

    <licenses>
        <license>
            <name>GNU AFFERO GENERAL PUBLIC LICENSE, Version 3 (AGPL-3.0)</name>
            <url>http://opensource.org/licenses/AGPL-3.0</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Jules Jacobsen</name>
            <email>j.jacobsen@qmul.ac.uk</email>
            <organization>Queen Mary University of London</organization>
            <organizationUrl>http://qmul.ac.uk</organizationUrl>
        </developer>
        <developer>
            <name>Damian Smedley</name>
            <email>d.smedley@qmul.ac.uk</email>
            <organization>Queen Mary University of London</organization>
            <organizationUrl>http://qmul.ac.uk</organizationUrl>
        </developer>
        <developer>
            <name>Peter Robinson</name>
            <email>peter.robinson@jax.org</email>
            <organization>The Jackson Laboratory for Genomic Medicine</organization>
            <organizationUrl>https://www.jax.org/</organizationUrl>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git://github.com/exomiser/Exomiser.git</connection>
        <developerConnection>scm:git:git@github.com:exomiser/Exomiser.git</developerConnection>
        <url>https://github.com/exomiser/Exomiser/tree/master</url>
    </scm>

    <ciManagement>
        <system>Circle CI</system>
        <url>https://circleci.com/gh/exomiser/Exomiser</url>
    </ciManagement>

    <modules>
        <module>phenix-repository</module>
        <module>exomiser-core</module>
        <module>exomiser-spring-boot-autoconfigure</module>
        <module>exomiser-spring-boot-starter</module>
        <module>exomiser-spring-boot-test</module>
        <module>exomiser-cli</module>
        <module>exomiser-data-genome</module>
        <module>exomiser-data-phenotype</module>
        <module>exomiser-rest-prioritiser</module>
        <module>exomiser-web</module>
    </modules>

    <properties>
        <java.version>11</java.version>
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
        <build.timestamp>${maven.build.timestamp}</build.timestamp>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.organization>The Monarch Initiative</project.organization>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.organization>exomiser</sonar.organization>
        <sonar.language>java</sonar.language>
        <jannovar.version>0.30</jannovar.version>
        <svart.version>1.0.2</svart.version>
        <htsjdk.version>2.24.1</htsjdk.version>
        <guava.version>31.1-jre</guava.version>
        <protobuf.version>3.21.12</protobuf.version>
        <spring-boot.version>2.7.7</spring-boot.version>
        <docker.base.image>
            gcr.io/distroless/java17-debian11@sha256:7c035b36d792b1a067d7a9eb86b444b9c42ba8e885b6d537860437dc30df0306
        </docker.base.image>
        <docker.registry>docker.io</docker.registry>
        <docker.repository>exomiser</docker.repository>
        <!--    These properties are use for the README.md  -->
        <genome.data.version>2302</genome.data.version>
        <phenotype.data.version>2302</phenotype.data.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.monarchinitiative.svart</groupId>
            <artifactId>svart</artifactId>
            <version>${svart.version}</version>
        </dependency>
        <!--DI framework -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <type>jar</type>
        </dependency>
        <!--H2 is a very versatile and highly compatible pure java DB-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.200</version>
        </dependency>
        <!--https://github.com/brettwooldridge/HikariCP/wiki/FAQ#q-how-to-i-properly-enable-preparedstatement-caching-for-postgresql-->
        <!--        <dependency>-->
        <!--            <groupId>com.impossibl.pgjdbc-ng</groupId>-->
        <!--            <artifactId>pgjdbc-ng</artifactId>-->
        <!--            <version>0.4</version>-->
        <!--        </dependency>-->
        <!--HikariCP is a "zero-overhead" production ready JDBC connection pool.
        https://github.com/brettwooldridge/HikariCP -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>

        <!-- Need to override guava to version 21.0 which  contains the Java 8 Collectors support on immutable Collections
        used by exomiser-core-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>${protobuf.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java-util</artifactId>
            <version>${protobuf.version}</version>
        </dependency>
        <!--JSON + YAML deps-->
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-protobuf</artifactId>
        </dependency>

        <!--Test dependencies-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Required to run Mockito with JUnit Jupiter-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- ByteBuddy 1.9.0+ required for compiling on Java 11 -->
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <!-- n.b. the wrapper plugin is completely broken and will only work on Maven 3.7.0+ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-wrapper-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <!-- Don't enable parallel tests as these will fail in the autoconfigure module due to MVStore
                only being able to be opened once by any given JVM -->
                <!--                <configuration>-->
                <!--                    <forkCount>0</forkCount>-->
                <!--                </configuration>-->
            </plugin>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>3.7.0.1746</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.7</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>coverage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>prepare-agent</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>report</id>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
